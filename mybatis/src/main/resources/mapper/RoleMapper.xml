<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lee.mybatis.mapper.RoleMapper">
    <!-- 默认的耳机缓存会有如下效果
        映射语句文件中所有的select语句将被缓存
        映射语句中的谁有insert、update、delete语句会刷新缓存
        缓存会使用Least Recently Used(LRU)算法回收
        根据时间表(如no Flush Interval没有刷新间隔)，缓存不会一任何时间顺序来刷新
        缓存会存储集合或对象(无论查询方法返回什么类型的值)的1024个引用
        缓存被视为reda/write的意味着对象检索不是共享的，而且可以安全的被调用者修改，而不存在其他调用者或线程所做的潜在修改-->
    <!--<cache/>-->
    <!--自定义缓存策略
        eviction: 回收策略
            LRU: 移除最长时间不被使用的对象，这是默认值
            FIFO: 先进先出，按对象进入缓存的顺序来移除它们
            SOFT: 软引用，移除基于垃圾回收器状态和软引用规则的对象
            WEAK: 弱引用，更积极地移除基于垃圾回收器和弱引用规则的对象
        flushInterval: 刷新间隔(毫秒)，可被设置为任意的正整数，而且它代表一个合理的毫秒形式的时间段。默认没有刷新间隔
        size: 引用数目，可以被设置为任意正整数，要记住缓存的对戏数目和运行环境的可用内存资源数目。默认值1024
        readOnly: 只读，true/false，制度的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改，这提供了很重要的性能优势。
        可读写的缓存会用过序列化返回缓存对象的拷贝，这种方式会慢一些，但是安全。因此默认是false-->
    <!--<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>-->
    <cache type="org.mybatis.caches.redis.RedisCache"/>
    <!--下方配置和Mapper中@CacheNamespaceRef(RoleMapper.class)的作用相同，让xml使用Mapper中@CacheNamespace的配置-->
    <!--<cache-ref namespace="com.lee.mybatis.mapper.RoleMapper"/>-->

    <resultMap id="roleMap" type="SysRole">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="enabled" column="enabled"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
    </resultMap>

    <select id="selectRoleByUserId" resultType="SysRole">
        SELECT r.id,
               r.role_name   roleName,
               r.enabled,
               r.create_by   createBy,
               r.create_time createTime,
               u.user_name AS 'user.userName', u.user_email AS 'user.userEmail'
        FROM sys_role r
                     INNER JOIN sys_user_role ur ON ur.role_id = r.id
                     INNER JOIN sys_user u ON u.id = ur.user_id
        WHERE u.id = #{userId}
    </select>

    <select id="selectRoleByUserId2" resultType="SysRole">
        <!-- UnserMapper中association使用如下，因为association中配置的是{id=role_id} 所以下方是用#{id}
             如果多个参数使用,隔开，例如column="{id=role_id, name=#{role_name}"-->
        SELECT *
        FROM sys_role
        WHERE id = #{id}
    </select>

    <resultMap id="rolePrivilegeMap" type="SysRole" extends="roleMap">
        <collection property="privilegeList" columnPrefix="privilege_"
                    resultMap="com.lee.mybatis.mapper.PrivilegeMapper.privilegeMap"/>
    </resultMap>

    <select id="selectAllRoleAndPrivilege" resultMap="rolePrivilegeMap">
        SELECT r.id,
               r.role_name,
               r.enabled,
               r.create_by,
               r.create_time,
               p.id             privilege_id,
               p.privilege_name privilege_privilege_name,
               p.privilege_url  privilege_privilege_url
        FROM sys_role r
                     INNER JOIN sys_role_privilege rp ON rp.role_id = r.id
                     INNER JOIN sys_privilege p ON p.id = rp.privilege_id
    </select>

    <resultMap id="rolePrivilegeListMapSelect" type="SysRole" extends="roleMap">
        <collection property="privilegeList" fetchType="lazy" column="{roleId=id}"
                    select="com.lee.mybatis.mapper.PrivilegeMapper.selectPrivilegeBuRoleId"/>
    </resultMap>

    <select id="selectRoleAndPrivilegeByUserId" resultMap="rolePrivilegeListMapSelect">
        SELECT r.*
        FROM sys_role r
                     INNER JOIN sys_user_role ur ON ur.role_id = r.id
        WHERE ur.user_id = #{userId}
    </select>

    <resultMap id="rolePrivilegeListMapChoose" type="SysRole">
        <!--discriminator属性(和Java中的switch很像)
                column: 该属性用于设置要进行鉴别比较的值的列
                javaType: 该属性用于指定列的类型，保证使用相同的Java类型来比较-->
        <discriminator javaType="int" column="enabled">
            <!--可以有一个或多个case标签
                    value: 该值为上方指定column用来匹配的值
                    resultMap: 当column和value值匹配时，可以配置使用resultMap指定的映射，优先级高于resultType
                    resultType: 当column和value值匹配时，用于配置使用的resultType-->
            <case value="1" resultMap="rolePrivilegeListMapSelect"/>
            <case value="0" resultMap="roleMap"/>
            <!--<case value="0" resultType="SysRole">-->
            <!--    <id column="id" property="id"/>-->
            <!--    <result column="role_name" property="roleName"/>-->
            <!--</case>-->
        </discriminator>
    </resultMap>

    <select id="selectRoleByUserIdChoose" resultMap="rolePrivilegeListMapChoose">
        SELECT r.*
        FROM sys_role r
                     INNER JOIN sys_user_role ur ON ur.role_id = r.id
        WHERE ur.user_id = #{userId}
    </select>


    <select id="selectRoleByUserIdAndEnabled" resultType="SysRole">
        SELECT r.id,
               r.role_name   roleName,
               r.enabled,
               r.create_by   createBy,
               r.create_time createTime
        FROM sys_role r
                     INNER JOIN sys_user_role ur ON ur.role_id = r.id
                     INNER JOIN sys_user u ON u.id = ur.user_id
        WHERE u.id = #{userId}
          AND r.enabled = #{enabled}
    </select>
</mapper>